// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(sel=zx, a=x, b=false, out=x1);
	Mux16(sel=nx, a=x1, b=nx1, out=x2);
	Mux16(sel=zy, a=y, b=false, out=y1);
	Mux16(sel=ny, a=y1, b=ny1, out=y2);
	Mux16(sel=f, a=xandy, b=xaddy, out=result);
	Mux16(sel=no, a=result, b=nresult, out=out, out[0..7]=outl, out[8..15]=outh, out[15]=ng);
	
	Not16(in=x1, out=nx1);
	Not16(in=y1, out=ny1);
	And16(a=x2, b=y2, out=xandy);
	Add16(a=x2, b=y2, out=xaddy);
	Not16(in=result, out=nresult);
	
	Or8Way(in=outl, out=z1);
	Or8Way(in=outh, out=z2);
	Or(a=z1, b=z2, out=z3);
	Not(in=z3, out=zr);
}