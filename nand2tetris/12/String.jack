// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let arr = Array.new(maxLength + 1);
      let len = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do arr.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let arr[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let arr[len] = c;
      let len = len + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let len = len - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, r, sign;
      let i = 0;
      let r = 0;
      let sign = 0;
      if (arr[0] = 45) {
        let sign = 1;
        let i = i+1;
      }
      while (i < len) {
        if ((arr[i] > 47) & (arr[i] < 58)) {
          let r = (10 * r) + (arr[i] - 48);
        } else {
          if (sign = 1) {
            let r = -r;
          }
          return r;
        }
        let i = i+1;
      }
      if (sign = 1) {
        let r = -r;
      }
      return r;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int i, q, l;
      var String temp;
      let len = 0;
      if (val < 0) {
        do appendChar(45);
        let val = -val;
      }

      let temp = String.new(16);
      while (val > 0) {
        let q = val / 10;
        do temp.appendChar(val - (q * 10) + 48);
        let val = q;
      }

      let i = 0;
      let l = temp.length();
      while (i < l) {
        do appendChar(temp.charAt(l-i-1));
        let i = i+1;
      }
      do temp.dispose();
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
