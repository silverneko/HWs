// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int unsorted_bin, top_chunk, heapbase;

    /** Initializes the class. */
    function void init() {
        let heapbase = 2048;
        let unsorted_bin = 0;
        let top_chunk = heapbase + 1;
        let top_chunk[-1] = 16384 - heapbase;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int iter, prev;
      var int chunk_header, chunk_size;
      var int new_chunk;
      let iter = unsorted_bin;
      let prev = 0;
      while (~(iter = 0)) {
        let chunk_header = iter - 2;
        let chunk_size = chunk_header[0];
        if (chunk_size > size) {
          if (prev = 0) {
            let unsorted_bin = iter[0];
          } else {
            let prev[0] = iter[0];
          }
          return iter;
        }
        let prev = iter;
        let iter = iter[0];
      }

      let new_chunk = top_chunk;
      let top_chunk = top_chunk + (size + 1);
      let top_chunk[-1] = new_chunk[-1] - (size + 1);
      let new_chunk[-1] = size + 1;
      return new_chunk;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int is_free, chunk_header, chunk_size;
        let chunk_header = o - 1;
        // let chunk_size = chunk_header[0];
        let o[0] = unsorted_bin;
        let unsorted_bin = o;
        return;
    }
}
